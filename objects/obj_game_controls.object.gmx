<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create( 0, 0, obj_view );

player1 = instance_create( obj_player1_spawn.x, obj_player1_spawn.y, obj_player );
player[ 0 ] = player1;
player2 = instance_create( obj_player2_spawn.x, obj_player2_spawn.y, obj_player );
player[ 1 ] = player2;
player3 = instance_create( obj_player3_spawn.x, obj_player3_spawn.y, obj_player );
player[ 2 ] = player3;

players = 3
for( var i = 0; i &lt; players; i++ ) {
    player_alive[ i ] = true; 
}


//This object handles player input
//key bindings should be changed in this object's step event
for( var i = 0; i &lt; players; i++ ) {
    with( player[ i ] ) {
        player_index = i;    
    
        left_held=0
        right_held=0
        down_held=0
        up_held=0
        jump_pressed=0
        jump_held=0
        jump_released=0
        
        joy1_connected=0
        joy1_in_use=0
        if gamepad_is_connected(0)// Checking for a gamepad
            {
            gamepad_set_axis_deadzone(0,0.5)//set deadzone
            joy1_connected=1// flag that we are indeed, using a joystick
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update players
for( var i = 0; i &lt; players; i++ ) {
    if( player_alive[ i ] == false ) {
        exit;
    }
    
    with( player[ i ] ) {
        joy1_in_use=0
        if joy1_connected=1
        {
            joystick_controls(0)
            if joy1_in_use=1{exit}
            // this gets joystick input, and if there was input this step, ends the step event to ingore keyboard input
        }
        jump_released=0
        if keyboard_check(vk_left)
            {
            left_held=1
            }
        else
            {
            left_held=0
            }
        
        if keyboard_check(vk_right)
            {
            right_held=1
            }
        else
            {
            right_held=0
            }
            
        if keyboard_check(vk_up)
            {
            up_held=1
            }
        else
            {
            up_held=0
            }
            
        if keyboard_check(vk_down)
            {
            down_held=1
            }
        else
            {
            down_held=0
            }
            
            
        if keyboard_check_pressed(vk_up)
            {
            jump_pressed=1
            }
        else
            {
            if keyboard_check(vk_up)
                {
                jump_pressed=0
                jump_held=1
                }
            else
                {
                jump_pressed=0
                jump_released=1
                jump_held=0
                }
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw walls and outlines
with(obj_wall)
    {
    if wall=1 // this checks to make sure its a wall, not a box.
        {     // as boxes are parented to walls
        draw_sprite(spr_wall_outline,image_single,x,y)
        }
    }
with(obj_wall)
    {
    if wall=1
        {
        draw_sprite(sprite_index,image_single,x,y)
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
