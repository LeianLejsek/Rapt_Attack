<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
physics_world_update_speed(60)// set physics calcs to run 60 times a second
phy_fixed_rotation=1 // do not allow the player's physics object ro rotate
phy_bullet=true// this tells gamemaker to pay extra attention to this object when doing physics calcs
int=instance_create(x,y,obj_player_interactor)//create our interactor object, and save it to the variable "int"


// these variables are used to determine the player's states in the step event
walk=0 //used to tell if he user input walk commands
ground=0 // used to tell if we are on solid ground or not
face=1 // which direction are we facing (used for image_xscale later)
slide=0// wall slide flag
flip=0//for the tripple jump
flip_mode=0//for the tripple jump
jump=0//for double jumo
jump_timer=0//for double jumo
animate_speed=0.75// the speed at which we index sub images
step_sound_timer=0//used for making the sounds for stepping
dir=0//used for grabbing vines
dis=0//used for grabbing vines
grab_x=0//used for grabbing vines
grab_y=0//used for grabbing vines
grab_target=0//used for grabbing vines
grab_joint=0//used for grabbing vines
grab_timer=0//used for grabbing vines

shoot_timer = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update player
int.phy_position_x=phy_position_x
int.phy_position_y=phy_position_y // these lines make our interaction object follow us 
int.phy_speed_x=phy_speed_x
int.phy_speed_y=phy_speed_y

walk=0// set this to zero, it gets ste when a player presses a move key


if jump_timer&gt;0
    {
    jump_timer-=1
    } // simple timer
else
    {
    jump=0
    }
    
if grab_timer&gt;0 // anothe simple timer
    {
    grab_timer-=1
    }

if shoot_timer&gt;0 {
    shoot_timer-=1;
}

if physics_test_overlap(x-(2*face),y+1,0,obj_wall)
    {
    if ground=0
        {
        ground=1
        jump_timer=5 // this block sets "ground" to 1 if there is a wall below us
        audio_play_sound(snd_land,1,0)
        }
    }
else
    {
    ground=0
    jump_timer=5
    }

if left_held=1 // from obj_game_controls
    {
    walk=1
    face=-1
    if phy_speed_x&gt;-4{phy_speed_x-=0.5}
    physics_apply_force(x,y,0,-5)
    if keyboard_check_pressed(vk_left)
        {
        phy_speed_x-=1
        }
    }
    
if right_held=1 // from obj_game_controls
    {
    walk=1
    face=1
    if phy_speed_x&lt;4{phy_speed_x+=0.5}
    physics_apply_force(x,y,0,-5)
    if keyboard_check_pressed(vk_right)
        {
        phy_speed_x+=1
        }
    }
    

if jump_pressed=1// from obj_game_controls
    {
    action_key()
    }
    
if ground=1 // if we are on teh ground
    {
    if walk=0// and not walking
        {
        phy_speed_x=phy_speed_x*0.9// air friction
        }
    else
        {
        if face=1{if phy_speed_x&lt;0{phy_speed_x=phy_speed_x*0.9}} // more friction
        if face=-1{if phy_speed_x&gt;0{phy_speed_x=phy_speed_x*0.9}} // more friction
        }
    }

//shoot
if down_held=1 {   
    if shoot_timer = 0 {
        shot = instance_create( x + sprite_width/1.5, y, obj_shot );
        with( shot ) {
            facing = other.face;
        }
        
        audio_play_sound( snd_slash1, 1, false );
        
        phy_speed_x = 3.5 * -face;
        phy_speed_y = -4;
        shoot_timer = 20;
    }
}
 
shot = instance_place( x, y, obj_shot )
if shot != noone {
    phy_speed_x = 5 * shot.facing;
}

if( y &gt; room_height + sprite_height ) {
    player_death();
}
   
sprites_step() // set our sprite based on the flags set before this
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//physics collide
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>draw_colours</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,20</point>
    <point>20,20</point>
    <point>16,32</point>
  </PhysicsShapePoints>
</object>
